const Events = require('../events');
const Config = require('../config');
let WType = Config.WORKTYPE == 'public' ? false : true
const Language = require('../language');
const Lang = Language.getString('_alpha');

Events.alphaXCMD({pattern:`${Config.CL_KEY} ?(.*)`, fromMe: WType, dontAddCommandList: true, deleteCommand: false }, (async (message, match) => {

        var result = Config.HANDLERS;        
        var hdlr = result.replace('^[','').replace(']','');   
        var handler = hdlr[hdlr.length = 0];
        
    const reactionMessage = {
        react: {
            text: Config.REACT_EMOJI || "‚úÖ" ,
            key: message.key
        }
    }
    
    await message.client.sendMessage(message.jid, reactionMessage);

 if (!match[1]) {

const row_1 = [
        {title: '„Äòüìú„Äô¬ª A ü ü C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös', description: "", rowId: handler + "al4x-all-commands"},
        {title: '„ÄòüçÉ„Äô¬ª L·¥è…¢·¥è M·¥Ä·¥ã·¥á Ä', description: "", rowId: handler + "logomaker"},
        {title: '„Äòüîè„Äô¬ª A·¥Ö·¥ç…™…¥', description: "", rowId: handler + "admin"},
        {title: '„Äòüë©‚Äçüîß„Äô¬ª P Ä·¥è“ì…™ ü·¥á', description: "", rowId: handler + "profile"},
        {title: '„Äò‚úÇÔ∏è„Äô¬ª E·¥Ö…™·¥õ M·¥á·¥Ö…™·¥Ä', description: "", rowId: handler + "emedia"},
        {title: '„ÄòüõãÔ∏è„Äô¬ª D·¥á·¥á·¥ò A…™', description: "", rowId: handler + "deepai"}
              ];
const row_2 = [
        {title: '„ÄòüóúÔ∏è„Äô¬ª D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Äs', description: "   </> Downloader commands \n\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "song [ KEEP LIMIT ]\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "video [ KEEP LIMIT ]\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "music [ FREE ]\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "mp4 [ FREE ]\n" +  Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "fb [ API ]\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "pinimg [ FREE ]Ô∏è\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "tiktok [ API ]\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "img [ FREE ]\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "ig [ API ]\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "mfire [ FREE ]\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "down [ FREE ]\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "mega [ FREE ]\n", rowId: handler + "</>_Events_CMD_List_</>"},
        {title: '„Äòüîç„Äô¬ª S·¥á·¥Ä Ä·¥Ñ ú', description: "   </> Search something \n\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "yt\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "playst\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "hpmod\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "wiki\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "spotify\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "github\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "sweather\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "weather\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "lyric\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "dict\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "covid\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "detectlang\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "currency\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "trt\n", rowId: handler + "</>_Events_CMD_List_</>"},
        {title: '„Äò‚è≥„Äô¬ª R·¥Ä…¥·¥Ö·¥è·¥ç', description: "   </> Random output commands \n\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "glowtext\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "compliment\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "insult\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "quote\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "wallpaper (Comming soon..üõ†Ô∏è)\n", rowId: handler + "</>_Events_CMD_List_</>"},
        {title: '„Äòüí£„Äô¬ª S·¥ò·¥Ä·¥ç', description: "   </> Spam commands \n\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "CrAsH (bug ‚ö†Ô∏èÔ∏è)\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "CrAsH high (bug ‚ö†Ô∏èÔ∏è)Ô∏èÔ∏è\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "spam\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "foto spam \n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "vid spam\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "sticker spam\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "alag\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "aspm\n", rowId: handler + "</>_Events_CMD_List_</>"},
        {title: '„Äòüé≠„Äô¬ª F·¥ú…¥', description: "   </> Fun commands \n\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "art pack\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "rollÔ∏èÔ∏è\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "memeÔ∏èÔ∏è\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "trumpsay\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "animesay\n" + Config.C_EMOJI + " *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*: " + handler + "changesay\n", rowId: handler + "</>_Events_CMD_List_</>"}
              ]
const row_3 = [
        {title: `${Config.CMENU}`, description: `${Config.CMENU_MSG}`, rowId: handler + "</>_Events_CMD_List_</>"}
              ];

        const sections = [
        {title: "‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢" , rows: row_1},
        {title: "‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢" , rows: row_2},
        {title: "‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢ ·¥áx·¥õ Ä·¥Ä ·¥ç·¥á…¥·¥ú ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢" , rows: row_3}
        ];
        
let listDesc;
if (!Config.CLIST_MSG) { 
listDesc = "Set Any Command List Msg! üîß" 
} else {
listDesc = Config.CLIST_MSG
};

        const button = {
         text: listDesc,
         footer: "¬© ${üòÅ Test Only}",
         title: `*üôÉ H·¥á ü ü·¥è! ${message.pushName}*` ,
         buttonText: `„Äé ${Config.C_EMOJI} ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á „Äè`,
         sections: sections
        }

    await message.client.sendMessage(message.jid, button, { quoted: message.data });

        } else {
            var CMD_HELP = '';
            Events.commands.map(
                async (command) =>  {
                    if (command.dontAddCommandList || command.pattern === undefined) return;
                    try {
                        var cmatch = command.pattern.toString().match(/(\W*)([A-Za-zƒü√º≈üƒ±i√∂√ß1234567890 ]*)/);
                        var cmmatch = command.pattern.toString().match(/(\W*)([A-Za-z√º≈üiƒü √∂√ß1234567890]*)/)[2]
                    } catch {
                        var cmatch = [command.pattern];
                    }
                    if (cmmatch.endsWith(' ')) {
                        var cmmatch = command.pattern.toString().match(/(\W*)([A-Za-z√º≈üiƒü √∂√ß1234567890]*)/)[2].replace(' ', '')
                    }
                    if (cmmatch == match[1]) {
                        var HANDLER = '';
    
                        if (/\[(\W*)\]/.test(Config.HANDLERS)) {
                            HANDLER = Config.HANDLERS.match(/\[(\W*)\]/)[1][0];
                        } else {
                            HANDLER = '.';
                        }
                        if (command.desc == '' && !command.usage == '' && command.warn == '') {
                            CMD_HELP += '```' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':``` ```' + (cmatch.length >= 3 ? (HANDLER + cmmatch) : command.pattern) + '```\n' + '*üí°' + ' '  + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                        }
                        if (!command.desc == '' && command.usage == '' && command.warn == '') {
                            CMD_HELP += '```' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':``` ```' + (cmatch.length >= 3 ? (HANDLER + cmmatch) : command.pattern) + '```\n' + '```' + Config.D_EMOJI + ' '  + Lang.DESC + ':``` ```' + command.desc + '``` \n\n';
                        }
                        if (command.desc == '' && command.usage == '' && !command.warn == '') {
                            CMD_HELP += '```' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':``` ```' + (cmatch.length >= 3 ? (HANDLER + cmmatch) : command.pattern) + '```\n' + '*' + Config.W_EMOJI + ' '  + Lang.WARN + ':* ```' + command.warn + '```\n\n'
                        }
                        if (!command.desc == '' && !command.usage == '' && command.warn == '') {
                            CMD_HELP += '```' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':``` ```' + (cmatch.length >= 3 ? (HANDLER + cmmatch) : command.pattern) + '```\n' + '```' + Config.D_EMOJI + ' '  + Lang.DESC + ':``` ```' + command.desc + '``` \n' + '*üí°' + ' '  + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                        }
                        if (!command.desc == '' && command.usage == '' && !command.warn == '') {
                            CMD_HELP += '```' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':``` ```' + (cmatch.length >= 3 ? (HANDLER + cmmatch) : command.pattern) + '```\n' + '```' + Config.D_EMOJI + ' '  + Lang.DESC + ':``` ```' + command.desc + '``` \n' + '*' + Config.W_EMOJI + ' '  + Lang.WARN + ':* ```' + command.warn + '```\n\n'
                        }
                        if (command.desc == '' && !command.usage == '' && !command.warn == '') {
                            CMD_HELP += '```' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':``` ```' + (cmatch.length >= 3 ? (HANDLER + cmmatch) : command.pattern) + '```\n' + '*üí°' + ' '  + Lang.EXAMPLE + ':* ```' + command.usage + '```\n' + '*' + Config.W_EMOJI + ' '  + Lang.WARN + ':* ```' + command.warn + '```\n\n'
                        }
                        if  (command.desc == '' && command.usage == '' && command.warn == '') {
                            CMD_HELP += '```' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':``` ```' + (cmatch.length >= 3 ? (HANDLER + cmmatch) : command.pattern) + '```\n\n'
                        }
                        if  (!command.desc == '' && !command.usage == '' && !command.warn == '') {
                            CMD_HELP += '```' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':``` ```' + (cmatch.length >= 3 ? (HANDLER + cmmatch) : command.pattern) + '```\n' + '```' + Config.D_EMOJI + ' '  + Lang.DESC + ':``` ```' + command.desc + '``` \n' + '*üí°' + ' '  + Lang.EXAMPLE + ':* ```' + command.usage + '```\n' + '*' + Config.W_EMOJI + ' '  + Lang.WARN + ':* ```' + command.warn + '```\n\n'
                        }
                    }
                }
            );
            if (CMD_HELP === '') CMD_HELP += Lang.NOT_FOUND;
            await message.client.sendMessage(
                message.jid, { text: Config.BOTNAME + '\n\n' + CMD_HELP } ,
                { quoted: message.data }
            );
         }
}));

Events.alphaXCMD({pattern:'al4x-all-commands$', fromMe: WType, dontAddCommandList: true, deleteCommand: false }, (async (message, match) => {

    const reactionMessage = {
        react: {
            text: Config.REACT_EMOJI || "‚úÖ" ,
            key: message.key
        }
    }
    
    await message.client.sendMessage(message.jid, reactionMessage);

        var CMD_HELP = '';
            Events.commands.map(
                async (command) =>  {
                    if (command.dontAddCommandList || command.pattern === undefined) return;
                    try {
                        var match = command.pattern.toString().match(/(\W*)([A-Za-zƒü√º≈üƒ±i√∂√ß1234567890 ]*)/);
                        var mmatch = command.pattern.toString().match(/(\W*)([A-Za-z√º≈üiƒü √∂√ß1234567890]*)/)[2]
                    } catch {
                        var match = [command.pattern];
                    }
    
                    var HANDLER = '';
    
                    if (/\[(\W*)\]/.test(Config.HANDLERS)) {
                        HANDLER = Config.HANDLERS.match(/\[(\W*)\]/)[1][0];
                    } else {
                        HANDLER = '.';
                    }
                    if (command.desc == '' && !command.usage == '' && command.warn == '') {
                        CMD_HELP += ' *' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + mmatch) : command.pattern) + '```\n' + '*üí°' + ' '  + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                    }
                    if (!command.desc == '' && command.usage == '' && command.warn == '') {
                        CMD_HELP += '*' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + mmatch) : command.pattern) + '```\n' + '*' + Config.D_EMOJI + ' '  + Lang.DESC + ':* ```' + command.desc + '``` \n\n';
                    }
                    if (command.desc == '' && command.usage == '' && !command.warn == '') {
                        CMD_HELP += '*' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + mmatch) : command.pattern) + '```\n' + '*' + Config.W_EMOJI + ' '  + Lang.WARN + ':* ```' + command.warn + '```\n\n'
                    }
                    if (!command.desc == '' && !command.usage == '' && command.warn == '') {
                        CMD_HELP += '*' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + mmatch) : command.pattern) + '```\n' + '*' + Config.D_EMOJI + ' '  + Lang.DESC + ':* ```' + command.desc + '``` \n' + '*üí°' + ' '  + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                    }
                    if (!command.desc == '' && command.usage == '' && !command.warn == '') {
                        CMD_HELP += '*' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + mmatch) : command.pattern) + '```\n' + '*' + Config.D_EMOJI + ' '  + Lang.DESC + ':* ```' + command.desc + '``` \n' + '*' + Config.W_EMOJI + ' '  + Lang.WARN + ':* ```' + command.warn + '```\n\n'
                    }
                    if (command.desc == '' && !command.usage == '' && !command.warn == '') {
                        CMD_HELP += '*' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + mmatch) : command.pattern) + '```\n' + '*üí°' + ' '  + Lang.EXAMPLE + ':* ```' + command.usage + '```\n' + '*' + Config.W_EMOJI + ' '  + Lang.WARN + ':* ```' + command.warn + '```\n\n'
                    }
                    if  (command.desc == '' && command.usage == '' && command.warn == '') {
                        CMD_HELP += '*' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + mmatch) : command.pattern) + '```\n\n'
                    }
                    if  (!command.desc == '' && !command.usage == '' && !command.warn == '') {
                        CMD_HELP += '*' + Config.C_EMOJI + ' '  + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + mmatch) : command.pattern) + '```\n' + '*' + Config.D_EMOJI + ' '  + Lang.DESC + ':* ```' + command.desc + '``` \n' + '*üí°' + ' '  + Lang.EXAMPLE + ':* ```' + command.usage + '```\n' + '*' + Config.W_EMOJI + ' '  + Lang.WARN + ':* ```' + command.warn + '```\n\n'
                    }
                }
            );

  await message.client.sendMessage(message.jid, { text: Config.BOTNAME + "\n\n" + CMD_HELP }, { quoted: message.data });

}));