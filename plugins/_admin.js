const Events = require('../events');
const Config = require('../config');
const axios = require('axios');
const fs = require('fs');
const Language = require('../language');
const Lang = Language.getString('admin');
const mut = Language.getString('mute');
let WType = Config.WORKTYPE == 'public' ? false : true

// ===================== functions ==================

async function checkImAdmin(jid, message, user) {

    var grup = await message.client.groupMetadata(jid);
    var sonuc = grup['participants'].map((member) => {

        if (member.id.split("@")[0] == user.split("@")[0] && member.id == 'admin' || 'superadmin') return true; else; return false;

    });

    return sonuc.includes(true)

}

// ======================== end functions ===================

Events.alphaXCMD({
    pattern: 'admin$', fromMe: WType, desc: "Admin Menu." }, (async(message, match) => {

    const reactionMessage = {
        react: {
            text: Config.REACT_EMOJI || "‚úÖ" ,
            key: message.key
        }
    }
    
    await message.client.sendMessage(message.jid, reactionMessage);

    var result = Config.HANDLERS;
    var hdlr = result.replace('^[', '').replace(']', '');
    var HANDLER = hdlr[hdlr.length = 0];

    let row1 = [{
        title: Config.C_EMOJI + ' ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö: ' + HANDLER + 'ban',
        description: "üõ°Ô∏è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥ò·¥á Äs·¥è…¥ “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò.\n",
        rowId: HANDLER + "alpha-x-bot-admin-menu"
    }, {
        title: Config.C_EMOJI + ' ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö: ' + HANDLER + 'add',
        description: "üîé ·¥Ä·¥Ö·¥Ö ·¥ús·¥á Ä ·¥õ·¥è …¢ Ä·¥è·¥ú·¥ò.\n",
        rowId: HANDLER + "alpha-x-bot-admin-menu"
    }, {
        title: Config.C_EMOJI + ' ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö: ' + HANDLER + 'gname',
        description: "üé≤ ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò …¥·¥Ä·¥ç·¥á.\n",
        rowId: HANDLER + "alpha-x-bot-admin-menu"
    }, {
        title: Config.C_EMOJI + ' ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö: ' + HANDLER + 'gdesc',
        description: "üì£ ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ö…™s·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥.\n",
        rowId: HANDLER + "alpha-x-bot-admin-menu"
    }, {
        title: Config.C_EMOJI + ' ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö: ' + HANDLER + 'gpp',
        description: "üåâ ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥ò·¥ò.\n",
        rowId: HANDLER + "alpha-x-bot-admin-menu"
    }, {
        title: Config.C_EMOJI + ' ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö: ' + HANDLER + 'promote',
        description: "üî• ·¥ç·¥Ä·¥ã·¥á s·¥è·¥ç·¥á·¥è…¥·¥á ·¥Ä·¥Ö·¥ç…™…¥.\n",
        rowId: HANDLER + "alpha-x-bot-admin-menu"
    }, {
        title: Config.C_EMOJI + ' ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö: ' + HANDLER + 'demote',
        description: "üõë ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥ús·¥á Ä.\n",
        rowId: HANDLER + "alpha-x-bot-admin-menu"
    }];

    let row2 = [{
        title: "‚úÖ ·¥õ·¥ú Ä…¥ ·¥è…¥ ·¥Ö…™s·¥Ä·¥ò·¥ò·¥á·¥Ä Ä…™…¥…¢ ·¥ç·¥áss·¥Ä…¢·¥á.",
        description: "",
        rowId: HANDLER + "dis on"
    }, {
        title: "‚úîÔ∏è ·¥õ·¥ú Ä…¥ ·¥è“ì“ì ·¥Ö…™s·¥Ä·¥ò·¥ò·¥á·¥Ä Ä…™…¥…¢ ·¥ç·¥áss·¥Ä…¢·¥á.",
        description: "",
        rowId: HANDLER + "dis off"
    }, {
        title: "üîï ·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò.",
        description: "",
        rowId: HANDLER + "mute"
    }, {
        title: "üîä ·¥ú…¥·¥ç·¥ú·¥õ·¥á …¢ Ä·¥è·¥ú·¥ò.",
        description: "",
        rowId: HANDLER + "unmute"
    }, {
        title: "üåè …¢·¥á·¥õ …¢ Ä·¥è·¥ú·¥ò ·¥Ä ü ü …™…¥“ì·¥è.",
        description: "",
        rowId: HANDLER + "details"
    }, {
        title: "üß©  Ä·¥ás·¥á·¥õ …¢ Ä·¥è·¥ú·¥ò …™…¥·¥†…™·¥õ·¥á ·¥Ñ·¥è·¥Ö·¥á.",
        description: "",
        rowId: HANDLER + "reset"
    }, {
        title: "üë®‚Äçüíª …¢·¥á·¥õ …¢ Ä·¥è·¥ú·¥ò …™…¥·¥†…™·¥õ·¥á.",
        description: "",
        rowId: HANDLER + "invite"
    }, {
        title: "‚ö†Ô∏è s·¥á…¥·¥Ö ·¥Ä…¥·¥õ…™s·¥ò·¥Ä·¥ç.",
        description: "",
        rowId: HANDLER + "aspm"
    }];

    const sections = [{
        title: "</>=== ‡πõ Admin Commands [manual] ü§πÔ∏è ===</>",
        rows: row1
    }, {
        title: "</>==== ‡πõ Admin Commands [auto] üë• ====</>",
        rows: row2
    }];

    let user = message.key.participant ? message.key.participant : message.jid;

    const listMessage = {
        text: "*·¥Ä·¥Ö·¥ç…™…¥ ·¥ç·¥á…¥·¥ú ü§πÔ∏è*",
        footer: "·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥°:",
        title:`*H·¥á ü ü·¥è @${user.split("@")[0]} üëã*`,
        buttonText: "‚ùù ·¥è·¥ò·¥õ…™·¥è…¥s ‚ùû",
        sections: sections,
        mentions: [user]
    }

    await message.client.sendMessage(message.jid, listMessage, {
        quoted: message.data
    });

}));

Events.alphaXCMD({
    pattern: 'ban ?(.*)', fromMe: true, onlyGroup: true, desc: Lang.BAN_DESC}, (async(message, match) => {

    var im = await checkImAdmin(message.jid, message, message.client.user.id);
    if (!im) return await message.client.sendMessage(message.jid, { text: Lang.IM_NOT_ADMIN }, {
        quoted: message.data
    });

    var _gpData = await message.client.groupMetadata(message.jid)

    if (Config.BANMSG == 'default') {
        if (message.reply_message !== false) {
            await message.client.sendMessage(message.jid, { text: '@' + message.reply_message.data.participant.split('@')[0] + '```, ' + Lang.BANNED + '```', contextInfo: { mentionedJid: [message.reply_message.data.participant], "participant": message.reply_message.data.participant || message.jid ,"quotedMessage": { "conversation": "removed you" } }});
            await message.client.groupParticipantsUpdate(message.jid, [message.reply_message.data.participant], "remove");
        } else if (message.reply_message === false && message.mention !== false) {
            var etiketler = '';
            message.mention.map(async(user) => {
                etiketler += '@' + user.split('@')[0];
            });

            await message.client.sendMessage(message.jid, { text: etiketler + '```, ' + Lang.BANNED + '```', contextInfo: { mentionedJid: [message.mention], "participant": message.mention || message.jid ,"quotedMessage": { "conversation": "removed you" } }});
            await message.client.groupParticipantsUpdate(message.jid, message.mention, "remove");
        } else {
            return await message.client.sendMessage(message.jid, { text: Lang.GIVE_ME_USER }, {
                quoted: message.data
            });
        }
    } else {
        if (message.reply_message !== false) {
            await message.client.sendMessage(message.jid, { text: '@' + message.reply_message.data.participant.split('@')[0] + Config.BANMSG , contextInfo: { mentionedJid: [message.reply_message.data.participant], "participant": message.reply_message.data.participant || message.jid ,"quotedMessage": { "conversation": "removed you" } }});
            await message.client.groupParticipantsUpdate(message.jid, [message.reply_message.data.participant], "remove");
        } else if (message.reply_message === false && message.mention !== false) {
            var etiketler = '';
            message.mention.map(async(user) => {
                etiketler += '@' + user.split('@')[0];
            });

            await message.client.sendMessage(message.jid, { text: etiketler + Config.BANMSG, contextInfo: { mentionedJid: [message.mention], "participant": message.mention || message.jid ,"quotedMessage": { "conversation": "removed you" } }});
            await message.client.groupParticipantsUpdate(message.jid, message.mention, "remove");
        } else {
            return await message.client.sendMessage(message.jid, { text: Lang.GIVE_ME_USER }, {
                quoted: message.data
            });
        }
    }
}));

Events.alphaXCMD({
    pattern: 'add(?: |$)(.*)', fromMe: true, onlyGroup: true, desc: Lang.ADD_DESC }, (async(message, match) => {

    var im = await checkImAdmin(message.jid, message, message.client.user.id);
    if (!im) return await message.client.sendMessage(message.jid, { text: Lang.IM_NOT_ADMIN }, {
        quoted: message.data
    });

    var _gpData = await message.client.groupMetadata(message.jid)

    if (Config.ADDMSG == 'default') {
        if (match[1] !== '') {
            match[1].split(' ')
                .map(async(user) => {
                await message.client.groupParticipantsUpdate(message.jid, [user + "@s.whatsapp.net"], "add");
                await message.client.sendMessage(message.jid, { text: '```@' + user  + ' ' + Lang.ADDED + '```', contextInfo: { mentionedJid: [user + "@s.whatsapp.net"], "participant": `${user}@s.whatsapp.net`,"quotedMessage": { "conversation": `¬© ${_gpData.subject}` } }});
            });
        } else if (match[1].includes('+')) {
            return await message.client.sendMessage(message.jid, { text: Lang.WRONG }, {
                quoted: message.data
            });
        } else {
            return await message.client.sendMessage(message.jid, { text: Lang.GIVE_ME_USER }, {
                quoted: message.data
            });
        }
    } else {
        if (match[1] !== '') {
            match[1].split(' ')
                .map(async(user) => {
                await message.client.groupParticipantsUpdate(message.jid, [user + "@s.whatsapp.net"], "add");
                await message.client.sendMessage(message.jid, { text: '```@' + user + '``` ' + Config.ADDMSG, contextInfo: { mentionedJid: [user + "@s.whatsapp.net"], "participant": `${user}@s.whatsapp.net`,"quotedMessage": { "conversation": `¬© ${_gpData.subject}` } }});
            });
        } else if (match[1].includes('+')) {
            return await message.client.sendMessage(message.jid, { text: Lang.WRONG }, {
                quoted: message.data
            });
        } else {
            return await message.client.sendMessage(message.jid, { text: Lang.GIVE_ME_USER }, {
                quoted: message.data
            });
        }
    }
}));